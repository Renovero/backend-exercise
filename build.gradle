buildscript {
    ext {
        springBootVersion = '2.2.6.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "nu.studer:gradle-jooq-plugin:2.0.7"
        classpath "gradle.plugin.com.boxfuse.client:flyway-release:4.0.3"
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'
apply plugin: "org.flywaydb.flyway"

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 14

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile "org.jooq:jooq"
    compile "com.h2database:h2"
    compile('org.flywaydb:flyway-core')
    jooqRuntime "com.h2database:h2"
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile "io.rest-assured:rest-assured:4.2.0"
}

bootJar {
    mainClassName = "com.exercise.BootApplication"
}

jooq {
    db(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:file:./data/db'
            user = 'sa'
            password = ''
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
            }
            generate {
                deprecated = false
                instanceFields = true
                records = true
            }
            target {
                packageName = 'com.exercise.generated'
                directory = 'build/generated/jooq'
            }
        }
    }
}

flyway {
    url = 'jdbc:h2:file:./data/db'
    user = 'sa'
    password = ''
    schemas = ['public']
    locations = ["filesystem:$project.projectDir/src/main/resources/db/migration"]
}

task cleanDb() {
    delete 'data'
}

generateDbJooqSchemaSource.dependsOn cleanDb
generateDbJooqSchemaSource.dependsOn flywayMigrate
clean.dependsOn cleanDb
